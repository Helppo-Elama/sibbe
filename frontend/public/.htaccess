# BEGIN Rewrite to HTTPS
<IfModule mod_rewrite.c>
  RewriteEngine on

  # remove www from host
  RewriteCond %{HTTP_HOST} ^www\.(.+)
  RewriteCond %{HTTPS}s/%1 ^(on(s)|offs)/(.+)
  RewriteRule ^ http%2://%3%{REQUEST_URI} [L,R=301]

  # enforce https
  RewriteCond %{HTTPS} !=on
  RewriteRule ^/?(.*) https://%{SERVER_NAME}/$1 [R,L]
  #rewrite non-existent uris to /index.html
  RewriteRule ^index\.html$ - [L]
  RewriteCond %{REQUEST_FILENAME} !-f
  RewriteCond %{REQUEST_FILENAME} !-d
  RewriteRule . /index.html [L]
 </IfModule>
 # END Rewrite to HTTPS

# BEGIN Expire headers
<IfModule mod_expires.c>
  # Turn on the module.
  ExpiresActive on
  # Set the default expiry times.

  AddType application/x-font-woff2 .woff2
  ExpiresByType application/x-font-woff2 "access plus 1 years"

  ExpiresDefault "access plus 1 years"
  ExpiresByType image/jpg "access plus 1 years"
  ExpiresByType image/svg+xml "access plus 1 years"
  ExpiresByType image/gif "access plus 1 years"
  ExpiresByType image/jpeg "access plus 1 years"
  ExpiresByType image/png "access plus 1 years"
  ExpiresByType text/css "access plus 1 years"
  ExpiresByType application/javascript "access plus 1 years"
  ExpiresByType image/ico "access plus 1 years"
  ExpiresByType image/x-icon "access plus 1 years"

  # ExpiresByType text/html "access plus 1 hour"
  ExpiresByType text/html "access plus 1 hour"
  # ExpiresByType application/javascript "access plus 1 hour"
  ExpiresByType application/javascript "now"
  #<FilesMatch "service-worker\\.js$">
  #  ExpiresByType application/javascript "access plus 1 hour"
  #</FilesMatch>
</IfModule>
# END Expire headers

# BEGIN Brotli/Gzip compression
# Rules to correctly serve gzip compressed CSS and JS files.
# Requires both mod_rewrite and mod_headers to be enabled.
<IfModule mod_headers.c>
  # Serve brotli compressed CSS files if they exist and the client accepts gzip.
  RewriteCond %{HTTP:Accept-encoding} br
  RewriteCond %{REQUEST_FILENAME}\.br -s
  RewriteRule ^(.*)\.css $1\.css\.br [QSA]

  # Serve gzip compressed CSS files if they exist and the client accepts gzip.
  RewriteCond %{HTTP:Accept-encoding} gzip
  RewriteCond %{REQUEST_FILENAME}\.gz -s
  RewriteRule ^(.*)\.css $1\.css\.gz [QSA]

  # Serve brotli compressed JS files if they exist and the client accepts gzip.
  RewriteCond %{HTTP:Accept-encoding} br
  RewriteCond %{REQUEST_FILENAME}\.br -s
  RewriteRule ^(.*)\.js $1\.js\.br [QSA]

  # Serve gzip compressed JS files if they exist and the client accepts gzip.
  RewriteCond %{HTTP:Accept-encoding} gzip
  RewriteCond %{REQUEST_FILENAME}\.gz -s
  RewriteRule ^(.*)\.js $1\.js\.gz [QSA]

  # Serve correct content types, and prevent mod_deflate double gzip.
  RewriteRule \.css\.gz$ - [T=text/css,E=no-gzip:1]
  RewriteRule \.js\.gz$ - [T=text/javascript,E=no-gzip:1]
  RewriteRule \.css\.br$ - [T=text/css,E=no-gzip:1]
  RewriteRule \.js\.br$ - [T=text/javascript,E=no-gzip:1]

  <FilesMatch "(\.js\.gz|\.css\.gz)$">
    # Serve correct encoding type.
    Header set Content-Encoding gzip
    # Force proxies to cache gzipped & non-gzipped css/js files separately.
    Header append Vary Accept-Encoding
  </FilesMatch>
  <FilesMatch "(\.js\.br|\.css\.br)$">
    # Serve correct encoding type.
    Header set Content-Encoding br
    # Force proxies to cache gzipped & non-gzipped css/js files separately.
    Header append Vary Accept-Encoding
  </FilesMatch>
</IfModule>
# END Brotli/Gzip compression